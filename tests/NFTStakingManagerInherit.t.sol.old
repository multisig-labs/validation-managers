// SPDX-License-Identifier: GPL-3.0
pragma solidity 0.8.25;

import { NewBase } from "./utils/NewBase.sol";

import { ERC721Mock } from "../contracts/mocks/ERC721Mock.sol";
import { NFTStakingManager, NFTStakingManagerSettings } from "../contracts/NFTStakingManager.sol";
import { IWarpMessenger, WarpMessage } from "./utils/IWarpMessenger.sol";

import { console } from "forge-std-1.9.6/src/console.sol";
import { console2 } from "forge-std-1.9.6/src/console2.sol";

import { ERC1967Proxy } from "@openzeppelin-contracts-5.3.0/proxy/ERC1967/ERC1967Proxy.sol";

import { ICMInitializable } from "icm-contracts-d426c55/contracts/utilities/ICMInitializable.sol";
import { ValidatorMessages } from "icm-contracts-d426c55/contracts/validator-manager/ValidatorMessages.sol";
import { PChainOwner, ConversionData, InitialValidator } from "icm-contracts-d426c55/contracts/validator-manager/ACP99Manager.sol";
import { ValidatorManager, ValidatorManagerSettings } from "icm-contracts-d426c55/contracts/validator-manager/ValidatorManager.sol";
import { ACP99Manager } from "icm-contracts-d426c55/contracts/validator-manager/ACP99Manager.sol";

import { ValidatorManagerTest } from "icm-contracts-d426c55/contracts/validator-manager/tests/ValidatorManagerTests.t.sol";

contract NFTStakingManagerTest is ValidatorManagerTest, NewBase {
  ERC721Mock public nft;
  ValidatorManager public app;
  NFTStakingManager public nftStakingManager;
  address public admin;
  address public deployer;

  function setUp() public override {
    ValidatorManagerTest.setUp();
    super.setUp();
    admin = getActor("Admin");
    deployer = getActor("Deployer");

    address[] memory addresses = new address[](1);
    addresses[0] = 0x1234567812345678123456781234567812345678;
    DEFAULT_P_CHAIN_OWNER = PChainOwner({ threshold: 1, addresses: addresses });

    vm.startPrank(deployer);

    nft = new ERC721Mock("NFT License", "NFTL");

    _validatorManagerSetup();

    NFTStakingManager nftImpl = new NFTStakingManager();
    ERC1967Proxy nftProxy = new ERC1967Proxy(
      address(nftImpl),
      abi.encodeCall(
        NFTStakingManager.initialize,
        _defaultNFTStakingManagerSettings(address(app), address(nft))
      )
    );
    nftStakingManager = NFTStakingManager(address(nftProxy));

    app.transferOwnership(address(nftStakingManager));

    vm.stopPrank();
  }
  function test_Scenario1() public {
    address validator = getActor("Validator");
    nft.mint(validator, 1);
    vm.startPrank(validator);
    uint256[] memory tokenIds = new uint256[](1);
    tokenIds[0] = 1;
    nftStakingManager.initiateValidatorRegistration(
      DEFAULT_NODE_ID,
      DEFAULT_BLS_PUBLIC_KEY,
      DEFAULT_P_CHAIN_OWNER,
      DEFAULT_P_CHAIN_OWNER,
      tokenIds
    );
    vm.stopPrank();
  }
  
  function _setUp() internal override returns (ACP99Manager) {
    // do nothing for now
  }

  function _beforeSend(uint256 amount, address spender) internal override {
    // do nothing
  }

  function _completeValidatorRegistration(
    uint32 messageIndex
  ) internal virtual override returns (bytes32) {
    return nftStakingManager.completeValidatorRegistration(messageIndex);
  }

  function _forceInitiateValidatorRemoval(
    bytes32 validationID,
    bool includeUptime,
    address recipientAddress
  ) internal virtual override {
    nftStakingManager.initiateValidatorRemoval(validationID);
  }

  function _completeValidatorRemoval(
    uint32 messageIndex
  ) internal virtual override returns (bytes32) {
    return nftStakingManager.completeValidatorRemoval(messageIndex);
  }

  function _initiateValidatorRegistration(
    bytes memory nodeID,
    bytes memory blsPublicKey,
    uint64 registrationExpiry,
    PChainOwner memory remainingBalanceOwner,
    PChainOwner memory disableOwner,
    uint64 weight
  ) internal virtual override returns (bytes32) {
    uint256[] memory tokenIds = new uint256[](1);
    return
      nftStakingManager.initiateValidatorRegistration({
        nodeID: nodeID,
        blsPublicKey: blsPublicKey,
        remainingBalanceOwner: remainingBalanceOwner,
        disableOwner: disableOwner,
        tokenIds: tokenIds
      });
  }

  function _initiateValidatorRegistration(
    bytes memory nodeID,
    bytes memory blsPublicKey,
    uint64 registrationExpiry,
    PChainOwner memory remainingBalanceOwner,
    PChainOwner memory disableOwner,
    uint16 delegationFeeBips,
    uint64 minStakeDuration,
    uint256[] memory tokenIds
  ) internal virtual returns (bytes32) {
    return
      nftStakingManager.initiateValidatorRegistration({
        nodeID: nodeID,
        blsPublicKey: blsPublicKey,
        remainingBalanceOwner: remainingBalanceOwner,
        disableOwner: disableOwner,
        tokenIds: tokenIds
      });
  }

  function _initiateValidatorRemoval(
    bytes32 validationID,
    bool includeUptime,
    address recipientAddress
  ) internal virtual override {
    nftStakingManager.initiateValidatorRemoval(validationID);
  }

  function _validatorManagerSetup() internal {
    ValidatorManager vmImpl = new ValidatorManager(ICMInitializable.Disallowed);
    ERC1967Proxy vmProxy = new ERC1967Proxy(
      address(vmImpl),
      abi.encodeCall(ValidatorManager.initialize, _defaultValidatorManagerSettings(deployer))
    );
    app = ValidatorManager(address(vmProxy));

    _mockGetBlockchainID();

    ConversionData memory conversion = _defaultConversionData();
    bytes32 id = sha256(ValidatorMessages.packConversionData(conversion));
    _mockGetPChainWarpMessage(ValidatorMessages.packSubnetToL1ConversionMessage(id), true);

    app.initializeValidatorSet(_defaultConversionData(), 0);
    console2.log("validator set initialized");
  }

  function _defaultValidatorManagerSettings(
    address admin_
  ) internal pure returns (ValidatorManagerSettings memory) {
    return
      ValidatorManagerSettings({
        admin: admin_,
        subnetID: DEFAULT_SUBNET_ID,
        churnPeriodSeconds: DEFAULT_CHURN_PERIOD,
        maximumChurnPercentage: DEFAULT_MAXIMUM_CHURN_PERCENTAGE
      });
  }

  function _defaultNFTStakingManagerSettings(
    address validatorManager_,
    address license_
  ) internal view returns (NFTStakingManagerSettings memory) {
    return
      NFTStakingManagerSettings({
        validatorManager: validatorManager_,
        license: license_,
        initialEpochTimestamp: uint32(block.timestamp),
        epochDuration: 1 days,
        licenseWeight: 1000,
        epochRewards: 1000 ether,
        maxLicensesPerValidator: 10
      });
  }
  

}
