// SPDX-License-Identifier: Ecosystem

pragma solidity 0.8.25;

import {
  Validator,
  ValidatorStatus,
  ValidatorManagerSettings,
  ValidatorRegistrationInput,
  PChainOwner,
  ConversionData,
  InitialValidator,
  IValidatorManager
} from "@avalabs/teleporter-contracts/validator-manager/interfaces/IValidatorManager.sol";
import {PoSValidatorManagerSettings} from "@avalabs/teleporter-contracts/validator-manager/interfaces/IPoSValidatorManager.sol";
import {PoSValidatorManager} from "@avalabs/teleporter-contracts/validator-manager/PoSValidatorManager.sol";
import {ExampleRewardCalculator} from "@avalabs/teleporter-contracts/validator-manager/ExampleRewardCalculator.sol";
import {IRewardCalculator} from "@avalabs/teleporter-contracts/validator-manager/interfaces/IRewardCalculator.sol";
import {MockWarpMessenger, WarpMessage} from "@mocks/MockWarpMessenger.sol";
import {ValidatorMessages} from "@avalabs/teleporter-contracts/validator-manager/ValidatorMessages.sol";

import {ICMInitializable} from "@avalabs/teleporter-contracts/utilities/ICMInitializable.sol";
import {INativeMinter} from "@avalabs/subnet-evm-contracts@1.2.0/contracts/interfaces/INativeMinter.sol";
import {Initializable} from "@openzeppelin/contracts-upgradeable@5.0.2/proxy/utils/Initializable.sol";
import {IERC721} from "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import {IERC721Receiver} from "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";

import {INFTStakingManager} from "../interfaces/INFTStakingManager.sol";

/**
 * @dev Implementation of the {INFTStakingManager} interface.
 *
 */
contract NFTStakingManager is Initializable, PoSValidatorManager, INFTStakingManager {
    INativeMinter public constant NATIVE_MINTER =
        INativeMinter(0x0200000000000000000000000000000000000001);

    // solhint-disable private-vars-leading-underscore
    /// @custom:storage-location erc7201:avalanche-icm.storage.NFTStakingManager
    struct NFTStakingManagerStorage {
        address _tokenAddress;
    }

    // solhint-enable private-vars-leading-underscore

    // keccak256(abi.encode(uint256(keccak256("avalanche-icm.storage.NFTStakingManagerStorage")) - 1)) & ~bytes32(uint256(0xff));
    // TODO calc this
    bytes32 public constant NFT_STAKING_MANAGER_STORAGE_LOCATION =
        0x7e5bdfcce15e53c3406ea67bfce37dcd26f5152d5492824e43fd5e3c8ac5ab00;

    error InvalidTokenAddress(address tokenAddress);

    // solhint-disable ordering
    function _getNFTStakingManagerStorage()
        private
        pure
        returns (NFTStakingManagerStorage storage $)
    {
        // solhint-disable-next-line no-inline-assembly
        assembly {
            $.slot := NFT_STAKING_MANAGER_STORAGE_LOCATION
        }
    }

    function _getPoSValidatorManagerStorage2()
        private
        pure
        returns (PoSValidatorManagerStorage storage $)
    {
        // solhint-disable-next-line no-inline-assembly
        assembly {
            $.slot := POS_VALIDATOR_MANAGER_STORAGE_LOCATION
        }
    }

    constructor(
        ICMInitializable init
    ) {
        if (init == ICMInitializable.Disallowed) {
            _disableInitializers();
        }
    }

    /**
     * @notice Initialize the staking manager
     * @dev Uses reinitializer(2) on the PoS staking contracts to make sure after migration from PoA, the PoS contracts can reinitialize with its needed values.
     * @param settings Initial settings for the PoS validator manager
     * @param tokenAddress The ERC721 NFT address
     */
    function initialize(
        PoSValidatorManagerSettings calldata settings,
        address tokenAddress
    ) external reinitializer(2) {
        __NFTStakingManager_init(settings, tokenAddress);
    }

    // solhint-disable-next-line func-name-mixedcase
    function __NFTStakingManager_init(
        PoSValidatorManagerSettings calldata settings,
        address tokenAddress
    ) internal onlyInitializing {
        __POS_Validator_Manager_init(settings);
        __NFTStakingManager_init_unchained(tokenAddress);
    }

    // solhint-disable-next-line func-name-mixedcase
    function __NFTStakingManager_init_unchained(
        address tokenAddress
    ) internal onlyInitializing {
        NFTStakingManagerStorage storage $ = _getNFTStakingManagerStorage();
        if (tokenAddress == address(0)) {
            revert InvalidTokenAddress(tokenAddress);
        }
        $._tokenAddress = tokenAddress;
    }

    /**
     * @notice See {IERC20TokenStakingManager-initializeValidatorRegistration}
     */
    function initializeValidatorRegistration(
        ValidatorRegistrationInput calldata registrationInput,
        uint16 delegationFeeBips,
        uint64 minStakeDuration,
        uint256 tokenId
    ) external nonReentrant returns (bytes32 validationID) {
        PoSValidatorManagerStorage storage $ = _getPoSValidatorManagerStorage2();
        // Validate and save the validator requirements
        if (
            delegationFeeBips < $._minimumDelegationFeeBips
                || delegationFeeBips > MAXIMUM_DELEGATION_FEE_BIPS
        ) {
            revert InvalidDelegationFee(delegationFeeBips);
        }

        if (minStakeDuration < $._minimumStakeDuration) {
            revert InvalidMinStakeDuration(minStakeDuration);
        }

        // Lock the NFT in the contract.
        _lock(tokenId);

        uint64 weight = valueToWeight(1 ether);
        validationID = _initializeValidatorRegistration(registrationInput, weight);

        $._posValidatorInfo[validationID].owner = _msgSender();
        $._posValidatorInfo[validationID].delegationFeeBips = delegationFeeBips;
        $._posValidatorInfo[validationID].minStakeDuration = minStakeDuration;
        $._posValidatorInfo[validationID].uptimeSeconds = 0;
        return validationID;
    }

    /**
     * @notice See {IERC20TokenStakingManager-initializeDelegatorRegistration}
     */
    function initializeDelegatorRegistration(
        bytes32 validationID,
        uint256 delegationAmount
    ) external nonReentrant returns (bytes32) {
        return _initializeDelegatorRegistration(validationID, _msgSender(), delegationAmount);
    }

    /**
     * @notice See {PoSValidatorManager-_lock}
     * Note: Must be guarded with reentrancy guard for safe transfer from.
     */
    function _lock(
        uint256 tokenId
    ) internal virtual override returns (uint256) {
        NFTStakingManagerStorage storage $ = _getNFTStakingManagerStorage();
        IERC721($._tokenAddress).safeTransferFrom(_msgSender(), address(this), tokenId);
        return 0;
    }

    /**
     * @notice See {PoSValidatorManager-_unlock}
     * Note: Must be guarded with reentrancy guard for safe transfer.
     */
    function _unlock(address to, uint256 tokenId) internal virtual override {
        NFTStakingManagerStorage storage $ = _getNFTStakingManagerStorage();
        IERC721($._tokenAddress).safeTransferFrom(address(this), to, tokenId);
    }

    /**
     * @notice See {PoSValidatorManager-_reward}
     */
    function _reward(address account, uint256 amount) internal virtual override {
        NATIVE_MINTER.mintNativeCoin(account, amount);
    }

    // Required function to receive ERC-721 tokens safely
    function onERC721Received(
        address, /*operator*/
        address, /*from*/
        uint256, /* tokenId */
        bytes calldata /*data*/
    ) external pure returns (bytes4) {
        return this.onERC721Received.selector;
    }
}
